import json
import os
import google
import sys
import io
from io import BytesIO
import cv2 as cv
from PIL import Image, ImageDraw
import face_recognition
import numpy as np
import logging
import base64
import re
from google.cloud import storage
from google.cloud import vision
from google.cloud.vision import types

# create a google cloud vision client
img_client = vision.ImageAnnotatorClient()

gae_dir = google.__path__.append('face_match/GCP_private_key/google-cloud-sdk/platform/google_appengine/google')
sys.path.insert(0, gae_dir) # might not be necessary

import google.appengine

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials
from google.auth import app_engine

from google.appengine.api import app_identity
from google.appengine.api import images

# Getting the credentials to make change to the project/app
credentials = GoogleCredentials.get_application_default()
api = discovery.build('ml', 'v1', credentials=credentials)
project = 'projects/{}'.format('face-match-219722')

# choose machine learning model. This should be directed by the frontend
# category information if backend and frontend and connected
model_name = os.getenv('MODEL_NAME', 'celeb_model')

huize = [-0.06597716, 0.08036334, 0.04592936, -0.02924938, -0.11216526, -0.00579459, -0.04527251, -0.10679842, 0.12171349, -0.15069072, 0.17678921, -0.03977152, -0.20733738, -0.07680656, -0.05653973, 0.2357996, -0.20273849, -0.15965953, -0.07236928, -0.01950016, 0.03847497, 0.00682649, 0.03156324, 0.00964098, -0.12973678, -0.34650919, -0.08619533, -0.05112593, -0.00816575, -0.07232255, -0.0190074, 0.08992251, -0.11135629, 0.04615228, 0.01190836, 0.09891944, -0.01582302, -0.11361597, 0.19355386, 0.00127007, -0.25896999, -0.00400663, 0.0544384, 0.24666744, 0.19696322, -0.01460781, 0.04038575, -0.11172455, 0.14222731, -0.17496657, -0.03431916, 0.13554302, 0.00554927, 0.06239656, 0.01828778, -0.09732553, 0.0398411, 0.08447129, -0.06741522, -0.07012016, 0.06162431, -0.09661818, -0.02836204, -0.09529686, 0.22595046, 0.04746725, -0.12231571, -0.17037532, 0.13914472, -0.13573512, -0.10326248, 0.01658992, -0.16176306, -0.12445088, -0.29002661, -0.01911377, 0.40853998, 0.0787245, -0.13884187, 0.07340954, -0.03091032, -0.01635932, 0.10761777, 0.20756008, -0.0319608, 0.02040027, -0.10154387, 0.02662699, 0.23967889, -0.09834416, -0.01078151, 0.16885833, 0.00322786, 0.07769771, 0.00247599, 0.00662124, -0.07490808, 0.09112778, -0.08935837, 0.01372287, 0.09497557, -0.04095287, 0.00843203, 0.1231631, -0.10844653, 0.13131899, 0.00160929, 0.07023587, 0.08300769, 0.02726312, -0.11413629, -0.07554265, 0.1213301, -0.19464579, 0.14731106, 0.18305425, 0.02018389, 0.08201285, 0.15310611, 0.1480303, -0.03532432, 0.02664389, -0.22279146, -0.01430921, 0.09179895, -0.01170638, 0.03429175, 0.00770477]
obama = [-0.09143437, 0.13086104, 0.01314376, -0.05788453, 0.01628958, 0.00041332, -0.08469844, -0.09900514, 0.17989591, -0.10539675, 0.24560225, 0.08059315, -0.21611471, -0.13486719, 0.0474246, 0.12056781, -0.16367503, -0.07826025, -0.112247, -0.10610127, 0.03652942, 0.00634994, 0.10533697, 0.04300565, -0.12117677, -0.33629161, -0.06974636, -0.18218069, -0.00158554, -0.11208319, -0.09656744, -0.02059188, -0.18194008, -0.10914119, 0.02073221, -0.02022123, 0.00240963, -0.00374015, 0.20474002, 0.02820584, -0.11632425, 0.09632837, 0.01547984, 0.21318355, 0.28629935, 0.07692288, -0.01180616, -0.09913059, 0.10386176, -0.21633521, 0.07274049, 0.14290063, 0.08237922, 0.04238796, 0.09769623, -0.18852285, 0.00360181, 0.08834428, -0.14143485, 0.00837218, 0.00788721, -0.08102695, -0.04035502, 0.03879577, 0.20594737, 0.09965952, -0.12292914, -0.05094441, 0.13211265, -0.02900141, 0.02445136, 0.02434402, -0.18431327, -0.20063359, -0.22774035, 0.09293825, 0.37345189, 0.19359812, -0.20881185, 0.01955765, -0.19599991, 0.02415318, 0.06105626, 0.00819601, -0.0717445, -0.13538511, -0.04118632, 0.05282186, 0.08226578, 0.03208527, -0.04098892, 0.2150697, -0.03382802, 0.06236771, 0.01853629, 0.05682234, -0.15838751, -0.03170493, -0.16015232, -0.06845071, 0.01404162, -0.04203653, 0.03085329, 0.1478163, -0.23243298, 0.05921932, 0.00418692, -0.0466677, 0.02229129, 0.07022519, -0.02721724, -0.03373826, 0.05814216, -0.23816788, 0.24889061, 0.2340347, 0.02495465, 0.17327932, 0.07225874, 0.03394281, -0.01637952, -0.02267806, -0.18229838, -0.06459421, 0.06046801, 0.07552315, 0.08523145, 0.00671963]
ali = [-0.17591959, 0.0642106, 0.02829658, -0.08987952, -0.17977677, 0.00412224, 0.01481109, -0.09289612, 0.1624158, -0.19511318, 0.2408638, 0.02261013, -0.17606489, 0.00501331, -0.04214463, 0.18743959, -0.11124166, -0.11598521, -0.14134532, -0.11912869, -0.01250374, 0.14821656, 0.00497579, 0.08292817, -0.13351887, -0.27815014, -0.06069538, -0.02673985, -0.01688191, -0.06884514, 0.02776616, 0.1639065, -0.05993991, 0.07698721, 0.06653521, 0.08116771, -0.04766964, -0.02021567, 0.15380196, 0.04851419, -0.21855858, 0.03393563, 0.07316653, 0.30451792, 0.22446546, -0.02109438, 0.02449038, -0.08056838, 0.04754224, -0.24693492, 0.0225895, 0.09578793, 0.03651149, -0.03367661, 0.14826815, -0.17567685, -0.04187378, 0.15393336, -0.11751221, -0.01748223, 0.04414124, -0.09717496, -0.10936182, -0.09043386, 0.17429942, 0.17922898, -0.15009725, -0.16977973, 0.19066915, -0.17610373, -0.10802954, 0.10715911, -0.12289293, -0.16340266, -0.1971491, 0.01859638, 0.42976207, 0.18665826, -0.16654691, 0.03048335, 0.03397089, 0.04526481, 0.09936479, 0.11927266, -0.10343198, -0.12315527, -0.07828661, 0.00644548, 0.11779377, 0.0627873, -0.06331794, 0.19923295, 0.04811763, -0.07290383, 0.03339189, 0.01786701, -0.10296892, -0.01961694, -0.10450535, -0.07140726, -0.00494376, -0.06446253, -0.01367833, 0.13497999, -0.16140556, 0.23765945, -0.08072492, 0.00481841, -0.00935498, 0.04173136, 0.00075849, 0.07810223, 0.08840586, -0.24740154, 0.10520654, 0.12356602, -0.02152709, 0.18806362, 0.07964985, 0.08989745, -0.00931501, 0.01722464, -0.18340404, -0.0984941, 0.0348916, -0.12296249, 0.08347806, 0.01275099]
kaki = [-0.132837832, 0.0301431715, 0.0693839937, -0.00307487696, -0.107128046, -0.000963611063, -0.116934203, -0.133483723, 0.175457239, -0.107784145, 0.187430948, -0.0684230402, -0.174303129, -0.0183854885, -0.0423554368, 0.228597522, -0.17473121, -0.145389616, 0.023875216, 0.00874872319, 0.0379538424, 0.0077417586, -0.00164347887, 0.0425797999, -0.123542041, -0.327252626, -0.0772000179, -0.0581973046, -0.0223905649, -0.0282553323, -0.0889018252, 0.0963342786, -0.184583545, -0.0059822835, 0.0449011922, 0.125979885, 0.0240396895, -0.0479509234, 0.189489543, 0.00138959289, -0.261441052, 0.0354069322, 0.0349415317, 0.218408644, 0.17386055, 0.0496089756, -0.0160045177, -0.109299943, 0.0842283443, -0.186364606, -0.00600521825, 0.165597647, 0.0921180695, 0.0162260607, -0.0571266674, -0.146735474, 0.0146925338, 0.0543890521, -0.133334279, -0.00331539288, 0.116088241, -0.0961280838, -0.0205527768, -0.105519682, 0.227012634, 0.079740718, -0.122907825, -0.136760801, 0.0914392695, -0.112405978, -0.0620267875, 0.0342281163, -0.167861909, -0.229620263, -0.313349724, -0.009098568, 0.386204302, 0.0860452652, -0.217648327, 0.065476574, -0.00646421313, 0.0174007975, 0.0895722732, 0.172459304, 0.0132547542, 0.0145440064, -0.047351487, -0.0231817812, 0.228605419, -0.0560867414, 0.016378507, 0.194113165, -0.00589764863, 0.0578138679, -0.0259545464, 0.0525986403, 0.0143253701, 0.0232611839, -0.0953669399, 0.00489305705, 0.000313842203, -0.00839146972, 0.0317573212, 0.117091805, -0.219663262, 0.133235157, -0.00378767401, 0.0164964534, 0.0531842113, 0.0504124202, -0.0717778653, -0.074769035, 0.149815276, -0.250171185, 0.151209846, 0.207575545, 0.0263605081, 0.145029485, 0.0685167089, 0.154277205, -0.0367511474, 0.0477678329, -0.200431019, -0.0487016998, 0.0727082789, -0.0449683852, 0.0654346272, 0.0591312796]
mzheng = [-0.05850004, 0.02444884, 0.02641404, -0.06039333, -0.1700837, -0.05480295, -0.04178705, -0.12236558, 0.08457188, -0.12790388, 0.20086634, -0.08982461, -0.19559982, -0.01188538, -0.03196526, 0.16966024, -0.16011237, -0.13951665, -0.08667932, 0.00777019, 0.05732254, 0.09484954, -0.01767957, 0.02824936, -0.12015755, -0.25853094, -0.06880195, -0.03937778, 0.01938454, -0.04846766, -0.06704371, 0.09281398, -0.15762123, -0.05190099, 0.06679496, 0.1214309, -0.01131447, -0.08140024, 0.15225098, 0.00454011, -0.30236578, 0.0620071, 0.09482513, 0.23213655, 0.14980531, 0.00421691, -0.0040171, -0.14163576, 0.1069774, -0.20294815, 0.01113904, 0.12453549, 0.06863309, 0.07038713, -0.00712813, -0.13412669, 0.05394048, 0.11207975, -0.09694058, 0.00964922, 0.14842774, -0.06579438, 0.03474293, -0.10835798, 0.22920409, 0.01852319, -0.11257423, -0.15266219, 0.06018318, -0.16626018, -0.16812031, 0.08290838, -0.14766276, -0.14072821, -0.32403961, -0.01894355, 0.36379379, 0.0938122, -0.18924388, 0.06735215, -0.00185257, 0.02746809, 0.15395838, 0.1752964, 0.0144592, 0.0648942, -0.08598566, 0.00068584, 0.29056937, -0.08867584, -0.0059293, 0.23629472, 0.045671, 0.08429618, 0.05095041, 0.03153452, -0.01740337, -0.01981973, -0.10576469, 0.03191576, 0.0519383, -0.04947399, -0.01026564, 0.14982191, -0.141514, 0.14342007, -0.02688167, 0.04763921, 0.0431169, -0.00182123, -0.03228028, -0.0712252, 0.12252513, -0.20681126, 0.1661174, 0.17499046, 0.05619891, 0.06670116, 0.10825235, 0.07887934, -0.04211418, 0.03406612, -0.21142828, -0.04184329, 0.11212629, -0.05984205, 0.07219566, 0.02907863]

# locate the storage bucket that stores instance images
storage_client = storage.Client()
bucket = storage_client.get_bucket("face-match-219722-images")

# use the Google Cloud Vision API to detect face location in an image and return face feature
# location metadata
def detect_face(face_file, max_results=4):
    """Uses the Vision API to detect faces in the given file.

    Args:
        face_file: A file-like object containing an image with faces.

    Returns:
        An array of Face objects with information about the picture.
    """
    client = vision.ImageAnnotatorClient()
    image = types.Image(content=face_file)

    return client.face_detection(image=image).face_annotations

# tried using the face_recognition module used in hw but ended up not proceeding 
# with this idea
"""
def crop_face(img):
    # process images using Haar Cascades
    face_cascade = cv.CascadeClassifier('haarcascade_frontalface_default.xml')
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    for (x,y,w,h) in faces:
        cv.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
        roi = img[y:y+h, x:x+w]
        img = roi

    # crop the images to detected faces 
    img_crop = cv.resize(img,(int(x+w), int(y+h)))
    img_crop = cv.cvtColor(img_crop, cv.COLOR_BGR2GRAY)
    return img_crop
"""

# get iamge from Cloud Storage and preprocess it using the Google Cloud Vision API
def read_file():
    gcs_file = bucket.get_blob("josh.jpg")
    img_string = gcs_file.download_as_string()
    
    print(detect_face(img_string))
 
    return detect_face(img_string)

# function to get match prediction on face features
def get_prediction():
  #input_data = {"instances": [
   #       huize
    #  ]}
  
  # there is bug in this section because the face feature locations are not compiled
  # to a 1-d array as input yet
  input_data = {"instances": [
      read_file()
    ]}
  print(np.asarray(read_file()).shape)
  parent = '%s/models/%s' % (project, model_name)
  prediction = api.projects().predict(body=input_data, name=parent).execute()
  print(prediction)
  return prediction

if __name__ == "__main__":
    read_file()